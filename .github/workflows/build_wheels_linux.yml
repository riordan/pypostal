name: Build Wheels (Linux)

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
  schedule:
    - cron: "0 12 1 * *"

jobs:
  build_wheels_linux:
    name: Build wheels on Linux (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            cibw_archs: "x86_64"
          - os: ubuntu-22.04-arm
            arch: aarch64
            cibw_archs: "aarch64"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get libpostal submodule commit hash
        id: get_submodule_hash
        shell: bash
        run: |
          HASH=$(git submodule status vendor/libpostal | awk '{ sub(/^[+-]?/, ""); print $1 }')
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Cache compiled libpostal library
        uses: actions/cache@v4
        id: cache-libpostal
        with:
          path: build/libpostal_install_cache
          key: linux-${{ matrix.arch }}-libpostal-cache-v2-${{ steps.get_submodule_hash.outputs.hash }}
          restore-keys: |
            linux-${{ matrix.arch }}-libpostal-cache-v2-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Upgrade pip and install cibuildwheel
        run: python -m pip install --upgrade pip cibuildwheel

      # Create an explicit bash script to execute inside the container
      - name: Create copy script
        run: |
          cat > copy_cache.sh << 'EOF'
          #!/bin/bash
          set -ex
          
          # Print build directory content for debugging
          echo "Container build directory content:"
          ls -la build/ || echo "No build directory"
          
          CACHE_DIR="build/libpostal_install_cache"
          if [ -d "$CACHE_DIR" ]; then
            echo "Found cache directory at $CACHE_DIR"
            mkdir -p "/host$CACHE_DIR"
            ls -la "$CACHE_DIR" || echo "Empty cache directory"
            find "$CACHE_DIR" -type d -exec ls -la {} \; || echo "No directories found"
            
            # Copy all files, creating directories as needed
            cp -r "$CACHE_DIR"/* "/host$CACHE_DIR/" || echo "Copy failed"
            
            echo "After copy to host:"
            ls -la "/host$CACHE_DIR/" || echo "Empty host cache directory"
          else
            echo "Cache directory $CACHE_DIR not found"
          fi
          EOF
          chmod +x copy_cache.sh

      - name: Ensure cache directory exists
        shell: bash
        run: mkdir -p build/libpostal_install_cache

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_BUILD: "cp311-* cp312-*"
          CIBW_BEFORE_BUILD_LINUX: "dnf install -y autoconf automake libtool pkgconfig curl perl-IPC-Cmd"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_SKIP: "pp* *-musllinux_* cp37-win*"
          CIBW_BUILD_VERBOSITY: "1"
          CIBW_TEST_COMMAND: |
            python -c "
            import os
            import sys

            print('Testing postal import...')
            import postal
            print(f'postal imported successfully. __file__={postal.__file__}')

            print('\\nTesting postal parser functionality...')
            from postal.parser import parse_address
            parsed = parse_address('781 Franklin Ave Crown Heights Brooklyn NYC NY 11216 USA')
            print(f'Address parsed: {parsed}')
            
            # Basic verification of parsing results
            expected_components = {
                'house_number': '781',
                'road': 'franklin ave',
                'suburb': 'crown heights',
                'city_district': 'brooklyn',
                'city': 'nyc',
                'state': 'ny'
            }
            
            match_count = 0
            for component, label in parsed:
                if label in expected_components and expected_components[label].lower() == component.lower():
                    match_count += 1
                    
            if match_count >= 4:  # At least 4 key components should match
                print('✓ Parser test passed')
            else:
                print('✗ Parser test failed')
                sys.exit(1)
                
            print('\\nTesting postal expansion functionality...')
            from postal.expand import expand_address
            expansions = expand_address('123 Main St Apt 4')
            print(f'Expansions: {expansions[:3]}...')
            
            # Basic verification of expansion results
            if len(expansions) > 0 and '123 main street apartment 4' in expansions:
                print('✓ Expansion test passed')
            else:
                print('✗ Expansion test failed')
                sys.exit(1)
                
            print('\\nAll tests passed successfully!')
            "
          # Improved after-build step that calls our dedicated script
          CIBW_AFTER_BUILD: |
            /host/copy_cache.sh
        with:
          output-dir: wheelhouse

      - name: Verify cache contents after build
        run: |
          echo "=== Cache directory structure after build ==="
          find build/libpostal_install_cache -type d | sort
          echo "=== Cache file sizes after build ==="
          find build/libpostal_install_cache -type f -name "*.a" -exec ls -lh {} \; || echo "No .a files found"
          du -sh build/libpostal_install_cache/* || echo "No subdirectories found"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
