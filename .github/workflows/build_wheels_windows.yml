name: Build Wheels (Windows)

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
  schedule:
    - cron: "0 12 1 * *"

# Explicitly define permissions
permissions:
  contents: read  # for actions/checkout
  security-events: write # for CodeQL if this job runs parallel to it
  actions: read   # for detecting workflow run conditions

jobs:
  build_wheels_windows:
    name: Build wheels on Windows (amd64)
    runs-on: windows-latest
    env:
      BUILD_ARCH: x64
      VCPKG_DEFAULT_TRIPLET: x64-windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Get libpostal submodule commit hash
        id: get_submodule_hash
        shell: bash
        run: |
          HASH=$(git submodule status vendor/libpostal | awk '{ sub(/^[+-]?/, ""); print $1 }')
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Enhance msys2/mingw64 environment
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            autoconf
            automake
            libtool
            make

      - name: Cache libpostal libraries
        uses: actions/cache@v4
        id: cache-libpostal
        with:
          path: vendor/libpostal/src/.libs
          key: windows-x64-libpostal-cache-v2-${{ steps.get_submodule_hash.outputs.hash }}
          restore-keys: |
            windows-x64-libpostal-cache-v2-

      - name: Build libpostal
        if: steps.cache-libpostal.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          cd vendor/libpostal
          cp -rf windows/* ./
          ./bootstrap.sh
          ./configure --disable-data-download
          make -j4

      - name: Create import library
        shell: cmd
        run: |
          cd vendor\libpostal
          if not exist src\.libs\libpostal.lib (
            lib.exe /def:libpostal.def /out:src\.libs\libpostal.lib /machine:x64
          )

      - name: Copy DLL and import library to expected locations
        shell: cmd
        run: |
          mkdir -p %GITHUB_WORKSPACE%\build\libpostal_install_cache\lib
          copy vendor\libpostal\src\.libs\libpostal-1.dll %GITHUB_WORKSPACE%\build\libpostal_install_cache\lib\
          copy vendor\libpostal\src\.libs\libpostal.lib %GITHUB_WORKSPACE%\build\libpostal_install_cache\lib\

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Upgrade pip and install cibuildwheel
        run: python -m pip install --upgrade pip cibuildwheel

      - name: Create test script for comprehensive testing
        shell: bash
        run: |
          cat > run_comprehensive_tests.py << 'EOF'
          import unittest
          import sys
          import importlib.util
          import os

          # First verify basic import works
          print("Testing postal module import...")
          import postal
          print(f"postal imported successfully from {postal.__file__}")
          
          # Import the test modules
          print("Loading test modules...")
          
          # Helper function to load a module from file path
          def load_module_from_path(module_name, file_path):
              spec = importlib.util.spec_from_file_location(module_name, file_path)
              module = importlib.util.module_from_spec(spec)
              sys.modules[module_name] = module
              spec.loader.exec_module(module)
              return module
              
          # Load test modules
          try:
              load_module_from_path("postal.tests", "postal/tests/__init__.py")
              expand_tests = load_module_from_path("postal.tests.test_expand", "postal/tests/test_expand.py")
              parser_tests = load_module_from_path("postal.tests.test_parser", "postal/tests/test_parser.py")
              
              # Run tests
              print("\nRunning address expansion tests...")
              expand_suite = unittest.TestLoader().loadTestsFromModule(expand_tests)
              expand_result = unittest.TextTestRunner(verbosity=2).run(expand_suite)
              
              print("\nRunning address parser tests...")
              parser_suite = unittest.TestLoader().loadTestsFromModule(parser_tests)
              parser_result = unittest.TextTestRunner(verbosity=2).run(parser_suite)
              
              # Check results
              if expand_result.wasSuccessful() and parser_result.wasSuccessful():
                  print("\nAll tests passed successfully!")
                  sys.exit(0)
              else:
                  print("\nSome tests failed!")
                  sys.exit(1)
                  
          except Exception as e:
              print(f"Error running tests: {e}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          EOF
          chmod +x run_comprehensive_tests.py

      - name: Build wheels
        env:
          # Use simple import test on Windows for now - tests requiring training data may fail due to path issues
          CIBW_TEST_COMMAND: >-
            python -c "import os; print('Testing basic postal import...'); import postal; print(f'postal imported successfully. __file__={postal.__file__}')"
          CIBW_BUILD: "cp311-* cp312-*"
          CIBW_ARCHS: "AMD64"
          CIBW_SKIP: "pp*"
          CIBW_BUILD_VERBOSITY: "1"
        run: cibuildwheel --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-amd64
          path: ./wheelhouse/*.whl